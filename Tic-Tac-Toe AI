import random


PLAYER_X = 'X'
PLAYER_O = 'O'
EMPTY = ' '

def print_board(board):
    for row in range(3):
        print(' | '.join(board[row]))
        if row < 2:
            print("---------")
def check_winner(board, player):
    for i in range(3):
        if all(board[i][j] == player for j in range(3)): 
            return True
        if all(board[j][i] == player for j in range(3)):  
            return True
    if board[0][0] == player and board[1][1] == player and board[2][2] == player:  
        return True
    if board[0][2] == player and board[1][1] == player and board[2][0] == player:  
        return True
    return False

def is_board_full(board):
    return all(board[row][col] != EMPTY for row in range(3) for col in range(3))
def minimax(board, depth, is_maximizing_player):
    if check_winner(board, PLAYER_O):
        return 1 
    if check_winner(board, PLAYER_X):
        return -1  
    if is_board_full(board):
        return 0  

    if is_maximizing_player:
        best_score = -float('inf')
        for row in range(3):
            for col in range(3):
                if board[row][col] == EMPTY:
                    board[row][col] = PLAYER_O  
                    score = minimax(board, depth + 1, False)
                    board[row][col] = EMPTY
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for row in range(3):
            for col in range(3):
                if board[row][col] == EMPTY:
                    board[row][col] = PLAYER_X  
                    score = minimax(board, depth + 1, True)
                    board[row][col] = EMPTY  
                    best_score = min(score, best_score)
        return best_score
def find_best_move(board):
    best_move = None
    best_score = -float('inf')

    for row in range(3):
        for col in range(3):
            if board[row][col] == EMPTY:
                board[row][col] = PLAYER_O  
                score = minimax(board, 0, False)
                board[row][col] = EMPTY
                if score > best_score:
                    best_score = score
                    best_move = (row, col)

    return best_move

def player_move(board):
    while True:
        try:
            row, col = map(int, input("Enter your move (row and column 0-2, separated by space): ").split())
            if board[row][col] == EMPTY:
                return row, col
            else:
                print("Invalid move. The cell is already occupied.")
        except (ValueError, IndexError):
            print("Invalid input. Please enter two numbers between 0 and 2.")

def play_game():
    board = [[EMPTY] * 3 for _ in range(3)]
    print("Welcome to Tic-Tac-Toe!")
    print_board(board)

    while True:
       
        row, col = player_move(board)
        board[row][col] = PLAYER_X
        print_board(board)
        
        if check_winner(board, PLAYER_X):
            print("You win!")
            break
        if is_board_full(board):
            print("It's a draw!")
            break
        print("AI is thinking...")
        ai_move = find_best_move(board)
        board[ai_move[0]][ai_move[1]] = PLAYER_O
        print(f"AI places 'O' at position ({ai_move[0]}, {ai_move[1]})")
        print_board(board)
        
        if check_winner(board, PLAYER_O):
            print("AI wins!")
            break
        if is_board_full(board):
            print("It's a draw!")
            break
play_game()
